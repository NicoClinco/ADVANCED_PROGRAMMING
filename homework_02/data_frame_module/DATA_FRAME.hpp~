
#ifndef DATA_FRAME_H
#define DATA_FRAME_H


#include <stdio.h>
#include <iostream>
#include <functional>
#include <cassert>
#include <string>
#include <fstream>
#include <sstream>
#include <variant>
#include <map>


class DATA_FRAME
{
 public:
  // Read the row structure:
  DATA_FRAME(std::vector<std::string> rowstructure):
    row_structure{rowstructure} {};

  void read(std::string file);

  // double mean(unsigned int col);

  //double stdDev(unsigned int col);

  bool IsNumeric(unsigned int col) const;
  //---------------------------------------------------//
  class RowIterator
  {
  private:
    //using std::variant<double,std::string,int> = type;
    //using rowtype = std::vector<type>;
    using type = std::variant<double,std::string,int>;
    using rowtype = std::vector<type>;
    std::vector<rowtype>::iterator curIter;
    //std::vector<std::vector<std::variant<double,std::string,int>>>::iterator curIter;

   public:

    RowIterator(std::vector<rowtype>::iterator it):curIter(it)};
    using difference_type = std::ptrdiff_t;
    using iterator_category =std::forward_iterator_tag;

    using ref = std::vector<type>&;
    using pRowIterator = std::vector<rowtype>::iterator;
      //using pRowIterator =  std::vector<std::variant<double,std::string,int> > >::iterator;

    // Iterator:
    pRowIterator operator->(){return curIter;};

    // Reference:
    ref operator*(){return *(curIter);};
    // Postfix
    
    RowIterator& operator++(int){curIter++; return *this;}
    friend bool operator== (const RowIterator& a, const RowIterator& b) { return a.curIter == b.curIter; };
    friend bool operator!= (const RowIterator& a, const RowIterator& b) { return a.curIter != b.curIter; };  
private:
  
      using type = std::variant<double,std::string,int>;
    using rowtype = std::vector<type>;
    std::vector<rowtype>::iterator curIter;
  };
  
  RowIterator rowIterbegin(){return RowIterator(dataframe.begin());};

  RowIterator rowIterEnd(){return RowIterator(dataframe.end());};
  //--------------------------------------------------// 
  
 private:
  //std::vector<std::string> row_structure = {"int","double","string","int","double"};
  std::vector<std::string> row_structure;
  std::vector<std::vector<std::variant<double,std::string,int> > > dataframe;

  // Create an std::map which maps the values to indexes:
  std::map<std::string, int> map_{{"double", 0}, {"string", 1}, {"int", 2}};
  
};



#endif
