#ifndef CLASSAD_H
#define CLASSAD_H

template<class type>
class ADexpression
{
 public:

  ADexpression() = default;

  virtual type evaluate(const type& x) const = 0;

  virtual type evaluate_der(const type& x) const = 0;

  
}

template<class type>
class Var:
  public ADexpression<type>
{
 public:
  
 Var(const type& value):
  value(value);

  const type evaluate() const
  {
    return 
  }

 private:
  type value_;
}


/*----------------------*/
template<class type>
class Sum:
  public ADexpression<type>
{
 public:

  Sum(const ADexpression& a,
      const ADexpression& b):a(a),b(b)
  {};

    virtual type evaluate(const type& x) const
    {
      return a.evaluate()+b.evaluate();
    }

  virtual type evaluate_der(const type& x) const
    {
      return a.evaluate_der() + b.evaluate_der();
    }
 private:
  const ADexpression& a;
  const ADexpression& b;
}

/*-----------------------*/

template<class type>
class Product:
  public ADexpression<type>
{
 public:

  
}




#endif
