#include <iostream>
#include <sstream>
#include <algorithm>


class Punct_stream {
  // like an istream, hut the user can add to
  // the set of whi tesp.Ke characters
public:
  Punct_stream(istream& is)
    : source(is), sensitive(true) { }
 
  void whitespace(const string& s)
  { white = s; }
  
  void add_white(char c) { white += c; }
 
  bool is_whitespace(char c);
  
  void case_sensitive(bool b) { sensitive = b; }
  
  bool is_case_sensitive() { return sensitive; }
  
  Punct_stream& operator>>(string& s);
  
  explicit operator bool();
  
private:
  istream& source;
  istringstream buffer;
  string white;
  bool sensitive;
};


bool Punc_stream::is_whitespace(char c)
{
  return std::find(white.begin(),white.end(),c) ?
    true : false;
}


Punc_stream& Punc_stream::operator&>>(std::string& s)
{
  while(!(buffer>>s))
    {
      if(buffer.bad() || !source.good())
	return *this;
      buffer.clear();

      string line;
      std::getline(source,line);
      // Lookup for characters in white:
      for(char& c : line)
	{
	  if(is_whitespace(c))
	    c = ' ';
	  else if (!sensitive)
	    c = tolower(c); // to lower case
	}
      buffer.str(line);
    }
  return *this;
}

explicit Punc_stream::operator::bool()
{
  return !(source.fail() || source.bad()) && source.good();
}


int main()
{

  std::istringstream instream("prova,sto provando a fare qualcosa;");
  Punc_stream ps(instream);
  ps.whitespace(";,");
  ps.case_sensitive(true);

  std::vector<std::string> vs;
  std::string word;
  while(ps>>word)
    vs.push_back(word);
  
    
    
  
  return 0;
}
