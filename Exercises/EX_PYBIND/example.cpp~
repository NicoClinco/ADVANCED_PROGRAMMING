#include <pybind11/pybind11.h>
#include <pybind11/stl.h>
#include <optional>

namespace py = pybind11;

int add(int i, int j)
{
  return i+j;
}

using vecOp = std::vector<std::optional<double>>;

class MyIterable
{
public:
  MyIterable(const vecOp& data):
    m_data(data){};
  vecOp& getData()
  {
    return m_data;
  }
public:
  vecOp m_data;
};




PYBIND11_MODULE(example, m) {
  m.doc() = "pybind11 example plugin"; // optional module docstring
  m.def("add", &add, "A function that adds two numbers");

 py::class_<MyIterable>(m,"MyIterable")
   .def(py::init<const vecOp&>())
   .def("getData",&MyIterable::getData,"Get the internal data");
}
